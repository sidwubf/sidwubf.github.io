<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Keep walking</title>
    <description></description>
    <link>http://sidwubf.github.io/</link>
    <atom:link href="http://sidwubf.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 26 Jul 2016 15:12:27 +0800</pubDate>
    <lastBuildDate>Tue, 26 Jul 2016 15:12:27 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Servlet工作原理</title>
        <description>&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Servelt容器例如Tomcat、Jetty等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tomcat容器模型&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://sidwubf.github.io/images/servlet001.jpg&quot; alt=&quot;Tomcat container model&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Sep 2014 19:10:00 +0800</pubDate>
        <link>http://sidwubf.github.io/java/servlet/2014/09/10/java-servlet.html</link>
        <guid isPermaLink="true">http://sidwubf.github.io/java/servlet/2014/09/10/java-servlet.html</guid>
        
        
        <category>java</category>
        
        <category>servlet</category>
        
      </item>
    
      <item>
        <title>NAT</title>
        <description>&lt;p&gt;NAT类型：&lt;/p&gt;

&lt;p&gt;1.Full cone NAT&lt;/p&gt;

&lt;p&gt;一旦一个内部地址（iAddr:port1）映射到外部地址（eAddr:port2），所有发自iAddr:port1的包都经由eAddr:port2向外发送。任意外部主机都能通过给eAddr:port2发包到达iAddr:port1&lt;/p&gt;

&lt;p&gt;2.Address-Restricted cone NAT&lt;/p&gt;

&lt;p&gt;一旦一个内部地址（iAddr:port1）映射到外部地址（eAddr:port2），所有发自iAddr:port1的包都经由eAddr:port2向外发送。任意外部主机（hostAddr:any）都能通过给eAddr:port2发包到达iAddr:port1的前提是：iAddr:port1之前发送过包到hostAddr:any. “any”也就是说端口不受限制&lt;/p&gt;

&lt;p&gt;3.Port-Restricted cone NAT&lt;/p&gt;

&lt;p&gt;一旦一个内部地址（iAddr:port1）映射到外部地址（eAddr:port2），所有发自iAddr:port1的包都经由eAddr:port2向外发送。一个外部主机（hostAddr:port3）能够发包到达iAddr:port1的前提是：iAddr:port1之前发送过包到hostAddr:port3.&lt;/p&gt;

&lt;p&gt;4.Symmetric NAT&lt;/p&gt;

&lt;p&gt;每一个来自相同内部IP与端口，到一个特定目的地地址和端口的请求，都映射到一个独特的外部IP地址和端口。
同一内部IP与端口发到不同的目的地和端口的信息包，都使用不同的映射
只有曾经收到过内部主机封包的外部主机，才能够把封包发回&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Aug 2014 14:26:00 +0800</pubDate>
        <link>http://sidwubf.github.io/nat/2014/08/02/NAT.html</link>
        <guid isPermaLink="true">http://sidwubf.github.io/nat/2014/08/02/NAT.html</guid>
        
        
        <category>NAT</category>
        
      </item>
    
      <item>
        <title>WordPress页面跳转</title>
        <description>&lt;p&gt;1.在/wp-content/themes/当前主题 下创建redirect.php&lt;/p&gt;

&lt;p&gt;2.把下面代码拷贝进去&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-linenos&quot; data-lang=&quot;linenos&quot;&gt;&amp;lt;?php
if (have_posts()) {
the_post();
$pattern = ‘@(https?://([-\w\.]+)+(:\d+)?(/([\w/_\.]*(\?\S+)?)?)?)@’;
preg_match($pattern, get_the_excerpt(), $matches);
if ($matches[0]) header(‘Location: ‘.$matches[0]);
else echo ‘Enter a URL into your page body text.’;
}
?&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3.创建页面时，在“页面模板”选择“redirect”，页面内容填写需要跳转的链接&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jun 2014 14:26:00 +0800</pubDate>
        <link>http://sidwubf.github.io/wordpress/php/2014/06/17/wordpress-page-redirect.html</link>
        <guid isPermaLink="true">http://sidwubf.github.io/wordpress/php/2014/06/17/wordpress-page-redirect.html</guid>
        
        
        <category>wordpress</category>
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>tcpdump命令</title>
        <description>
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-linenos&quot; data-lang=&quot;linenos&quot;&gt;tcpdump -nS
tcpdump -nnvvS
tcpdump -nnvvXS
tcpdump -nnvvXSs 1514

tcpdump host 1.2.3.4
tcpdump src 2.3.4.5
tcpdump dst 3.4.5.6
tcpdump net 1.2.3.0/24
tcpdump icmp

tcpdump port 3389
tcpdump src port 1025
tcpdump dst port 389
tcpdump src port 1025 and tcp
tcpdump udp and src port 53
tcpdump portrange 21-23

tcpdump less 32
tcpdump greater 128
tcpdump &amp;gt; 32
tcpdump &amp;lt;= 128

tcpdump -nnvvS and src 10.5.2.3 and dst port 3389
tcpdump -nvX src net 192.168.0.0/16 and dst net 10.0.0.0/8 or 172.16.0.0/16
tcpdump -nvvXSs 1514 dst 192.168.0.2 and src net and not icmp
tcpdump -vv src mars and not dst port 22&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 01 Jun 2014 10:21:00 +0800</pubDate>
        <link>http://sidwubf.github.io/linux/tcpdump/2014/06/01/tcpdump.html</link>
        <guid isPermaLink="true">http://sidwubf.github.io/linux/tcpdump/2014/06/01/tcpdump.html</guid>
        
        
        <category>linux</category>
        
        <category>tcpdump</category>
        
      </item>
    
      <item>
        <title>Linux常用命令</title>
        <description>
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-linenos&quot; data-lang=&quot;linenos&quot;&gt;last reboot //查看重启纪录
df -lh //查看硬盘信息
shutdown -h now //关机
less /etc/passwd
netstat -lnp //查看端口开通情况

ls -l | grep &quot;^-&quot; | wc -l 查看当前目录下文件个数
ls -lR | grep &quot;^-&quot; | wc -l 查看当前目录下文件个数(包括子目录)
ls -lR | grep &quot;^d&quot; | wc -l 查看当前目录下目录个数(包括子目录)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-linenos&quot; data-lang=&quot;linenos&quot;&gt;find用法举例

在某个路径下查找所有包含&quot;hello&quot;字符串的文件
find /etc -name &quot;*&quot; | xargs grep &quot;hello&quot;
find ~ -name &quot;.txt&quot; -print #在$HOME中查.txt文件并显示
find . -name &quot;.txt&quot; -print
find . -name &quot;[A-Z]&quot; -print #查以大写字母开头的文件
find /etc -name &quot;host&quot; -print #查以host开头的文件
find . -name &quot;[a-z][a-z][0–9][0–9].txt&quot; -print #查以两个小写字母和两个数字开头的txt文件
find . -perm 755 -print
find . -perm -007 -exec ls -l {} \; #查所有用户都可读写执行的文件同-perm 777
find . -type d -print
find . ! -type d -print
find . -type l -print
find . -size +1000000c -print #查长度大于1Mb的文件
find . -size 100c -print # 查长度为100c的文件
find . -size +10 -print #查长度超过期作废10块的文件（1块=512字节）
find etc home apps -depth -print | cpio -ivcdC65536 -o /dev/rmt0
find /etc -name &quot;passwd&quot; -exec grep &quot;cnscn&quot; {} \; #看是否存在cnscn用户
find . -name &quot;yao&quot; | xargs file
find . -name &quot;yao&quot; | xargs echo &quot;&quot; &amp;gt; /tmp/core.log
find . -name &quot;yao&quot; | xargs chmod o-w
find -name april* 在当前目录下查找以april开始的文件
find -name april* fprint file 在当前目录下查找以april开始的文件，并把结果输出到file中
find -name ap* -o -name may* 查找以ap或may开头的文件
find /mnt -name tom.txt -ftype vfat 在/mnt下查找名称为tom.txt且文件系统类型为vfat的文件
find /mnt -name t.txt ! -ftype vfat 在/mnt下查找名称为tom.txt且文件系统类型不为vfat的文件
find /tmp -name wa* -type l 在/tmp下查找名为wa开头且类型为符号链接的文件
find /home -mtime -2 在/home下查最近两天内改动过的文件
find /home -atime -1 查1天之内被存取过的文件
find /home -mmin +60 在/home下查60分钟前改动过的文件
find /home -amin +30 查最近30分钟前被存取过的文件
find /home -newer tmp.txt 在/home下查更新时间比tmp.txt近的文件或目录
find /home -anewer tmp.txt 在/home下查存取时间比tmp.txt近的文件或目录
find /home -used -2 列出文件或目录被改动过之后，在2日内被存取过的文件或目录
find /home -user cnscn 列出/home目录内属于用户cnscn的文件或目录
find /home -uid +501 列出/home目录内用户的识别码大于501的文件或目录
find /home -group cnscn 列出/home内组为cnscn的文件或目录
find /home -gid 501 列出/home内组id为501的文件或目录
find /home -nouser 列出/home内不属于本地用户的文件或目录
find /home -nogroup 列出/home内不属于本地组的文件或目录
find /home -name tmp.txt -maxdepth 4 列出/home内的tmp.txt 查时深度最多为3层
find /home -name tmp.txt -mindepth 3 从第2层开始查
find /home -empty 查找大小为0的文件或空目录
find /home -size +512k 查大于512k的文件
find /home -size -512k 查小于512k的文件
find /home -links +2 查硬连接数大于2的文件或目录
find /home -perm 0700 查权限为700的文件或目录
find /tmp -name tmp.txt -exec cat {} \;
find /tmp -name tmp.txt -ok rm {} \;
find / -amin -10 # 查找在系统中最后10分钟访问的文件
find / -atime -2 # 查找在系统中最后48小时访问的文件
find / -empty # 查找在系统中为空的文件或者文件夹
find / -group cat # 查找在系统中属于 groupcat的文件
find / -mmin -5 # 查找在系统中最后5分钟里修改过的文件
find / -mtime -1 #查找在系统中最后24小时里修改过的文件
find / -nouser #查找在系统中属于作废用户的文件
find / -user fred #查找在系统中属于FRED这个用户的文件

find . -type f -exec ls -l {} \;
-rw-r–r– 1 root root 34928 2003-02-25 ./conf/httpd.conf
-rw-r–r– 1 root root 12959 2003-02-25 ./conf/magic
-rw-r–r– 1 root root 180 2003-02-25 ./conf.d/README
查当前目录下的所有普通文件，并在- e x e c选项中使用ls -l命令将它们列出

在/ l o g s目录中查找更改时间在5日以前的文件并删除它们：
find logs -type f -mtime +5 -exec -ok rm {} \;

查询当天修改过的文件
find ./ -mtime -1 -type f -exec ls -l {} \;

查询文件并询问是否要显示
find ./ -mtime -1 -type f -ok ls -l {} \;
&amp;lt; ls … ./classDB.inc.php &amp;gt; ? y
-rw-r–r– 1 cnscn cnscn 13709 1月 12 12:22 ./classDB.inc.php
find ./ -mtime -1 -type f -ok ls -l {} \;
&amp;lt; ls … ./classDB.inc.php &amp;gt; ? n&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Mon, 19 May 2014 13:49:23 +0800</pubDate>
        <link>http://sidwubf.github.io/linux/2014/05/19/linux-commands.html</link>
        <guid isPermaLink="true">http://sidwubf.github.io/linux/2014/05/19/linux-commands.html</guid>
        
        
        <category>linux</category>
        
      </item>
    
  </channel>
</rss>
